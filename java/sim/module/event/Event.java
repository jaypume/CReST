/**
 *   This file is part of CReST: The Cloud Research Simulation Toolkit 
 *   Copyright (C) 2011, 2012 John Cartlidge 
 * 
 *   For a full list of contributors, refer to file CONTRIBUTORS.txt 
 *
 *   CReST was developed at the University of Bristol, UK, using 
 *   financial support from the UK's Engineering and Physical 
 *   Sciences Research Council (EPSRC) grant EP/H042644/1 entitled 
 *   "Cloud Computing for Large-Scale Complex IT Systems". Refer to
 *   <http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/H042644/1>
 * 
 *   CReST is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.
 *
 *   For further information, contact: 
 *
 *   Dr. John Cartlidge: john@john-cartlidge.co.uk
 *   Department of Computer Science,
 *   University of Bristol, The Merchant Venturers Building,
 *   Woodland Road, Bristol, BS8-1UB, United Kingdom.
 *
 */
/**
 * @author Luke Drury (ld8192)
 * @created 19 Jul 2011
 */
package sim.module.event;

import org.apache.log4j.Logger;

import sim.module.Module;
import sim.physical.World;

/**
 * Abstract base class for events. All other events inherit from this class and
 * are placed into the event queue for simulation.
 * 
 * Each event must override performEvent(), which will perform all main
 * activities related to that event, and also generateEvents(), which should
 * create events that must occur as a direct consequence of the current event
 * happening, e.g. a fix event must be generated by a failure event.
 */
public abstract class Event implements Comparable<Event>
{
	
	public static Logger logger = Logger.getLogger(Event.class);
	
//    protected static final long START_TIME_DISTRIBUTION = 1000000;
    protected final long        mStartTime;
    protected int               numEventsGenerated     = 0;
    protected boolean 			ignore = false; //ignore this event
    protected int 				datacentre_index = -1; //the datacentre this event is associated with (-1 if non-dc specific)
    
    /**
     * Basic constructor.
     * 
     * @param pStartTime
     *            The time that this event should happen.
     * @param dcID
     * 			The datacentre associated with this event
     * 		  (set dcID = -1 for non-specific event)
     */
    public Event(final long pStartTime, int dcID)
    {
        mStartTime = pStartTime;
        datacentre_index = dcID;
        
    }
    
    /**
     *  Is the Event ignored?
     * 
     *  An ignored event is one that has been overridden by another event
     *  and so should now be ignored.
     *  
     *  For E.g., a ServiceStop event may be over-ridden by a ServerFailure
     *  event if the failed server is the one the service is running on.
     * 
     * @return  true/false
     */
    public boolean isIgnored(){
    	return ignore;
    }
    
    /** 
     *  Set this Event to be ignored.
     * 
     *  This may be because Event has been overridden by another event
     *  For E.g., a ServiceStop event may be over-ridden by a ServerFailure
     *  event if the failed server is the one the service is running on.
     * 
     */
    public void setIgnored() {
    	ignore = true;
    }

    /**
     * Return the time that this event will happen at.
     * 
     * @return Time this event will happen.
     */
    public long time()
    {
        return mStartTime;
    }

    /**
     * Method to allow two events to be comparable for sorting purposes.
     */
    @Override
    public int compareTo(Event pOther)
    {
        int result = 0;

        if (this.time() < pOther.time())
        {
            result = -1;
        }
        else if (this.time() > pOther.time())
        {
            result = 1;
        }

        return result;
    }

    /**
     * Method to perform necessary steps associated with this event, e.g. crash
     * a server, start a service, finish simulation.
     * 
     * @return True if simulator should continue running, else false.
     */
    public boolean perform()
    {
        boolean continueSimulation = true;

        // Update the current time in the world and call the event specific code.
        World world = World.getInstance();
        world.setTime(time());
        continueSimulation = performEvent();
        
        // Generate events if the pseudorandom aspect of the simulator is not turned off
        if (Module.EVENTS_MODULE.isActive())
        {
            generateEvents();
        }
        		
        return continueSimulation;
    }

    /**
     * Get the number of events generated by this event.
     * 
     * @return the number of events that this event generated
     */
    public int getNumEventsGenerated()
    {
        return numEventsGenerated;
    }

    /**
     * Get the type of event that this is.
     * 
     * @return what type of specific event this is, as a string.
     */
    public String getType()
    {
        return this.getClass().getName().substring(4);
    }

    /**
     * Get the index of the datacentre associated with this event
     * 
     * @return datacentre index (-1 if non0datacentre specific)
     */
    public int getDatacentreIndex() {
    	return datacentre_index;
    }
    	
    /**
     * Method to perform unique actions associated with this type of event.
     * 
     * @return True if simulator should continue running, else false.
     */
    protected abstract boolean performEvent();

    /**
     * Method for which produces a set of events to add to the event queue based
     * on some configurable variables and probability distributions.
     */
    protected abstract void generateEvents();
}
